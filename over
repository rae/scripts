#!/bin/zsh
# set -x

prog=`basename $0`

usage() {
	cat <<-EOF
	Usage: $prog [-? | -n | -l loc | -t dur | -e trim | -m margin | -h hmargin | -v vmargin | -s scale] reaction show [offset [left/centre/right [duration [trim]]]]
		-?         - show this help
		-o.        - open output file after completion
		-n         - show what would happen but do not actually encode
		-l loc.    - where to put the show at the bottom of the screen: left, center/centre, right
		-t dur     - how long to clip for (useful for testing to see if you got the offset right)
		-m margin  - margin at left/bottom/right edges between the show and the edge of the reaction
		-h hmargin - horizontal margin at left/right edges between the show and the edge of the reaction
		-v vmargin - vertical margin at bottom edge between the show and the edge of the reaction
		-s scale.  - the size of the show relative to the reaction (default: 0.5)

	    defaults: $prog -s 0.5 -l center reaction show 0

	EOF
    exit 0
}

dry_run=false
open_when_done=false
srcDelay=0
duration=""
location=centre
end_trim=0

## spacing between the show and the edge of the screen
# vertically
vmargin=0
# horizontally
hmargin=0

# how big the overlay is
overlayScale=.5

while getopts '?'nol:t:e:m:s:h:v: opt; do
    case $opt in
        '?') usage ;;
        n) dry_run=true ;;
		o) open_when_done=true ;;
		l) location="${OPTARG}" ;;
		t) duration=(-t "${OPTARG}") ;;
		e) end_trim="${OPTARG}" ;;
		m) vmargin="${OPTARG}"; hmargin="${OPTARG}" ;;
		h) hmargin="${OPTARG}" ;;
		v) vmargin="${OPTARG}" ;;
		s) overlayScale="${OPTARG}" ;;
    esac
done
# remove flags from the paramater list
shift $((OPTIND-1))

echo "## ARGS are" "${@}"

# require at least two arguments: the reaction and the show
if [ $# -lt 2 ]; then
	usage
	exit 1
fi

# first the reaction, then the show
reaction="$1"
show="$2"

reactionWidth=0
reactionHeight=0
reactionDuration=0
showWidth=0
showHeight=0
showDuration=0

reactionDurationExpr="$(ffmpeg -hide_banner -i "${reaction}" |& grep Duration: | perl -pe 's/.*Duration:\s*([0-9:.]+),.*/reactionDuration=${1}/')"
eval "$reactionDurationExpr"
reactionSeconds=$(echo "${reactionDuration}" | perl -pe 's#(\d+):(\d+):(\d+)\.(\d+)#$4/100 + $3 + $2*60 + $1*3600#e')

showDurationExpr="$(ffmpeg -hide_banner -i "${show}" |& grep Duration: | perl -pe 's/.*Duration:\s*([0-9:.]+),.*/showDuration=${1}/')"
eval "$showDurationExpr"
# 00:00:06.68
showSeconds=$(echo "${showDuration}" | perl -pe 's#(\d+):(\d+):(\d+)\.(\d+)#$4/100 + $3 + $2*60 + $1*3600#e')
[ -z "$3" ] || srcDelay="$3"
[ -z "$4" ] || location="$4"
[ -z "$5" ] || duration=(-t "$5")
[ -z "$6" -o "x$6" = x0 ] || end_trim="${6}"

# convert min:sec to seconds if it's formatted that way
end_trim=$(echo "${end_trim}" | perl -pe 's#(\d+):(\d+)#$1*60 + $2#e')

out="${reaction%.*}-Reid.${reaction##*.}"
echo "##"
echo "##     show = ${show}"
echo "##       - duration = ${showDuration} [$((${showSeconds} - end_trim)) s]"
echo "## reaction = ${reaction}"
echo "##       - duration = ${reactionDuration} [${reactionSeconds} s]"
echo "##    delay = $srcDelay"
echo "## location = $location"
echo "## duration = $duration"
echo "## end trim = ${end_trim}"
echo "##  dry run = ${dry_run}"
echo "##"
echo "## / out = $out"
echo ""

reactionExpr="$(ffmpeg -hide_banner -i "${reaction}" |& grep 'Video:' | head -1 | perl -pe 's/^.* (\d+)x(\d+).*/reactionWidth=${1}; reactionHeight=${2}/')"
echo "reactionExpr=$reactionExpr"
eval "$reactionExpr"

showExpr="$(ffmpeg -hide_banner -i "${show}" |& grep 'Video:' | head -1 | perl -pe 's/^.* (\d+)x(\d+).*/showWidth=${1}; showHeight=${2}/')"
echo "showExpr=$showExpr"
eval "$showExpr"

overlayWidth=$((reactionWidth * overlayScale))
overlayHeight=$((reactionHeight * overlayScale))
srcScale=$(($overlayWidth / $showWidth))
case $location in
	right) hoffset=$((reactionWidth - showWidth*srcScale - $hmargin)) ;;
	left) hoffset=$hmargin ;;
	*) hoffset=$((reactionWidth/2 - showWidth/2*srcScale + $hmargin)) ;;
esac
echo "#        show size: ${showWidth}x${showHeight}: $show"
echo "#reaction duration: ${reactionDuration} [${reactionSeconds} seconds]"
echo "#    show duration: ${showDuration} [${showSeconds} seconds]"
echo "# rection size: ${reactionWidth}x${reactionHeight}: $reaction"
echo "# overlay size: ${overlayWidth}x${overlayHeight} @ ${overlayScale}X"
voffset=$((reactionHeight - showHeight*srcScale - $vmargin))
echo "# `date` -- starting @ srcScale = $srcScale (dx=$hoffset, dy=$voffset)]"
echo ""

qq='"'
q="'"

# Arguments to -filter_complex for various situations
# ---------------------------------------------------
#
# Mixing audio from 2 sources:
#	amix=inputs=2:duration=longest
#
# for different volumes:
#	[0:0]volume=0.09[a];[1:0]volume=1.8[b];[a][b]amix=inputs=2:duration=longest
#	[a]adelay=${srcDelay}|${srcDelay}[a];[a][b]amix=inputs=2:dropout_transition=0
#
# Audio delay
#	[a]adelay=2000|2000[a];[a][b]amix=inputs=2:dropout_transition=0
#

trim=()
if [ \! "x${trim}" = "x0" ]; then
	trim=(-ss 0 -to $(($showSeconds - $end_trim)) )
fi

echo ffmpeg -y -hide_banner -loglevel warning -stats \\
echo \	-i $qq"${reaction}"$qq \\
echo \	-itsoffset "${srcDelay}" \\
echo \	${trim[*]} \\
echo \	-i $qq"${show}"$qq \\
echo \	-filter_complex $q"amix=inputs=2:duration=longest"$q \\
echo \	-filter_complex $q"[1] scale=iw*${srcScale}:-1 [scaled]; [0][scaled] overlay=${hoffset}:${voffset}"$q \\
echo \	-async 1 \\
echo \	-map 0:a \\
echo \	${duration[*]} \\
echo \	$qq"$out"$qq
echo ""

if $dry_run; then
	exit 0
fi

ffmpeg -y -hide_banner -loglevel warning -stats \
	-i "${reaction}" \
	-itsoffset "${srcDelay}" \
	${trim[*]} \
	-i "${show}" \
	-filter_complex "amix=inputs=2:duration=longest" \
	-filter_complex "[1] scale=iw*${srcScale}:-1 [scaled]; [0][scaled] overlay=${hoffset}:${voffset}" \
	-async 1 \
	-map 0:a \
	${duration[*]} \
	"$out"
echo "# `date` -- done: file://$PWD/$(echo $out | sed -e 's/ /%20/g')"

! $dry_run && $open_when_done && open "$out"

# -vf subtitles="${show}"
# -t 00:10:00 \
# -t 00:02:00 \
# "$out" && open "$out"
# -map 0:0 -map 1:1 -shortest \

# To copy the video from input_0.mp4 and audio from input_1.mp4:
#
# $ ffmpeg -i input_0.mp4 -i input_1.mp4 -c copy -map 0:0 -map 1:1 -shortest out.mp4
