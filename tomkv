#!/bin/sh
#
# tomkv
#	- convert all arguments to mkv files
#	  resulting mkv files are stored in $PWD/"mkv"
#

# name of directory in PWD where we will put mkv files
mkvdir=mkv

# name of output file, tracked in case of interrupt
out=""

# how many files have been completed
completedCount=0

# how many bytes have been processed
completedSize=0

# how many files have been processed in this run
processedCount=0

# how many bytes have been processed in this run
processedSize=0

# total number of files we are working on
total=$#

# total number of bytes left to process
totalSize=0

# start time in Julian seconds
start=$(date +%s)

# name of script
prog=$(basename "$0")

# length of date string
tmp=$(date +"%H:%M:%S")
dateLen=${#tmp}

# print final report
finish() {
	echo "`date` --- processed ${processedCount} files."
}

setup() {
	# no arguments = process all mp4 files in $PWD
	extlist=(mp4)
	found=1
	if [ $# = 0 ]; then
		found=0
		for ext in ${extlist[@]}; do
			set *.$ext
			if [ "x$*" != 'x*.'"$ext" ]; then
				found=1
				break
			fi
		done
	fi
	if [ $found = 0 ]; then
		echo "${prog}: No files specified and no files found with extension: ${extlist[@]}"
		exit 2
	fi

	if [ ! -d "${mkvdir}" ]; then
		echo "$0: directory ${mkvdir} missing. Creating it."
		mkdir -p "${mkvdir}"
	fi
}

cleanup() {
	if [ "${out}xx" != xx ]; then
		echo "### ${prog}: User interrupt; deleting $out"
		rm "${out}"
	else
		echo "### ${prog}: User interrupt"
	fi
	finish
	exit 1
}

# report printed as each files starts processing
report() {
	mp4="$1"
	now=$(date +%s)
	delta=$((now-start));
	etaMessagePrefix="ETA "
	etaMessageLength=$((dateLen+${#etaMessagePrefix}))
	remainingCount=$((total-completedCount))
	etaMessage=$(printf "%-${etaMessageLength}s" "no ETA")
	averageMin="00"
	averageSec="00"

	
	if [ ${processedCount} -gt 0 ]; then
		# size-based guess of remaining time (using factor of 1000 since bash has no floating point)
		K=100000000000
		processingRateK=$((delta*K / processedSize))
		remainingSizeInBytes=$((totalSize - completedSize))
		remainingTimeInSeconds=$(( (processingRateK * remainingSizeInBytes) / K ))
		average=$((delta/completedCount))
		averageMin=$(printf "%02.2d" $((average/60)) )
		averageSec=$(printf "%02.2d" $((average%60)) )
		# eta="$((now+average*remainingCount))"
		eta=$((now+remainingTimeInSeconds))
		if [ $remainingCount = 0 ]; then
			etaMessage=$(printf "%-${etaMessageLength}s" "ETA: now")
		else
			etaMessage="${etaMessagePrefix}$(date -r $eta +"%H:%M:%S")"
		fi
	fi
	# show completedCount+1 as the # of the file we are *currently* working on
	displayCount=$(printf "%03.3d" $((completedCount+1)) )
	echo "`date` -- #${displayCount} / $total; ${averageMin}m${averageSec}s average, ${etaMessage} --- processing ${mp4}"
}

calculateSizes() {
	# iterate over all arguments and calculate remaining size
	completedCount=0
	completedSize=0
	totalSize=0
	total=$#
	for mp4; do
		out=${mkvdir}/"${mp4%.*}".mkv
		mp4Size=$(stat -f %z "${mp4}")
		if [ -r "${out}" ]; then
			((completedCount++))
			((completedSize += mp4Size))
			echo "# ${out} already exists - skipping"
			continue
		fi
		((totalSize += mp4Size))
	done
}

convert() {
	# iterate over all arguments and convert
	processedCount=0
	processedSize=0
	start=$(date +%s)
	mkdir -p "${mkvdir}" || exit 1
	for videoFile; do
		out=${mkvdir}/"${videoFile%.*}".mkv
		if [ -r "${out}" ]; then
			continue
		fi
		report "${videoFile}"
		# use `nice` to be .. nice
		nice ffmpeg -i "${videoFile}" "${out}" > /dev/null 2>&1
		# ensure timestamp is the same
		touch -r "${videoFile}" "${out}"
		((completedCount++))
		size=$(stat -f %z "${videoFile}")
		((completedSize += size))
		((processedSize += size))
		((processedCount++))
	done
}

# ^C cleans up and exits
trap 'cleanup' INT

# check the first argument
if [ $# -gt 0 -a -d "${1}" ]; then
	for dir; do
		echo "### ${prog}: processing directory $dir"
		cd "$dir"
		mp4s=(*.[Mm][Pp]4)
		if [ "x${mp4s}x" = "x*.[Mm][Pp]4x" ]; then
			echo "### ${prog}: no mp4 files"
		else
			calculateSizes *.[Mm][Pp]4
			convert *.[Mm][Pp]4
			echo "### ${prog}: finished directory $dir"
		fi
		echo ""
		cd ..
	done
else
	setup "$@"
	calculateSizes "$@"
	convert "$@"
fi

finish
